"""Update profile fields

Revision ID: c4445e08ea86
Revises: 6507ac862688
Create Date: 2021-02-17 18:19:03.001679

"""
import geoalchemy2
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "c4445e08ea86"
down_revision = "6507ac862688"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    ### custom stuff
    # hosting_status
    # move the old stuff
    op.alter_column("users", "hosting_status", new_column_name="hosting_status_old")
    op.execute("ALTER TYPE hostingstatus RENAME TO hostingstatus_old")
    # create the new stuff
    hostingstatus_enum = sa.Enum("can_host", "maybe", "cant_host", name="hostingstatus")
    hostingstatus_enum.create(op.get_bind())
    op.add_column("users", sa.Column("hosting_status", hostingstatus_enum, nullable=True))
    # copy the data
    op.execute(
        "UPDATE users SET hosting_status_old = 'maybe'::hostingstatus_old WHERE hosting_status_old = 'difficult'::hostingstatus_old"
    )
    op.execute("UPDATE users SET hosting_status = hosting_status_old::text::hostingstatus")
    # drop the old stuff
    op.drop_column("users", "hosting_status_old")
    op.execute("DROP TYPE hostingstatus_old")
    # sleeping arrangement
    # we'll just drop the old stuff, there's no way to convert them
    op.drop_column("users", "sleeping_arrangement")
    sleepingarrangement_enum = sa.Enum("private", "common", "shared_room", "shared_space", name="sleepingarrangement")
    sleepingarrangement_enum.create(op.get_bind())
    op.add_column(
        "users",
        sa.Column(
            "sleeping_arrangement",
            sleepingarrangement_enum,
            nullable=True,
        ),
    )
    ###
    op.add_column("users", sa.Column("additional_information", sa.String(), nullable=True))
    op.add_column("users", sa.Column("camping_ok", sa.Boolean(), nullable=True))
    op.add_column("users", sa.Column("drinking_allowed", sa.Boolean(), nullable=True))
    op.add_column("users", sa.Column("drinks_at_home", sa.Boolean(), nullable=True))
    op.add_column("users", sa.Column("education", sa.String(), nullable=True))
    op.add_column("users", sa.Column("has_housemates", sa.Boolean(), nullable=True))
    op.add_column("users", sa.Column("has_kids", sa.Boolean(), nullable=True))
    op.add_column("users", sa.Column("has_pets", sa.Boolean(), nullable=True))
    op.add_column("users", sa.Column("hometown", sa.String(), nullable=True))
    op.add_column("users", sa.Column("housemate_details", sa.String(), nullable=True))
    op.add_column("users", sa.Column("kid_details", sa.String(), nullable=True))
    meetupstatus_enum = sa.Enum("wants_to_meetup", "open_to_meetup", "does_not_want_to_meetup", name="meetupstatus")
    meetupstatus_enum.create(op.get_bind())
    op.add_column(
        "users",
        sa.Column(
            "meetup_status",
            meetupstatus_enum,
            nullable=True,
        ),
    )
    op.add_column("users", sa.Column("my_travels", sa.String(), nullable=True))
    op.add_column("users", sa.Column("other_host_info", sa.String(), nullable=True))
    op.add_column("users", sa.Column("parking", sa.Boolean(), nullable=True))
    parkingdetails_enum = sa.Enum("free_onsite", "free_offsite", "paid_onsite", "paid_offsite", name="parkingdetails")
    parkingdetails_enum.create(op.get_bind())
    op.add_column(
        "users",
        sa.Column(
            "parking_details",
            parkingdetails_enum,
            nullable=True,
        ),
    )
    op.add_column("users", sa.Column("pet_details", sa.String(), nullable=True))
    op.add_column("users", sa.Column("pronouns", sa.String(), nullable=True))
    op.add_column("users", sa.Column("sleeping_details", sa.String(), nullable=True))
    op.add_column("users", sa.Column("smokes_at_home", sa.Boolean(), nullable=True))
    op.add_column("users", sa.Column("things_i_like", sa.String(), nullable=True))
    op.drop_column("users", "multiple_groups")
    op.drop_column("users", "color")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    raise Exception("Can't downgrade this migration, sorry!")
    # ### end Alembic commands ###
