import secrets
from base64 import urlsafe_b64encode

import nacl.pwhash
from nacl.bindings.crypto_generichash import generichash_blake2b_salt_personal
from nacl.bindings.utils import sodium_memcmp
from nacl.exceptions import InvalidkeyError
from nacl.utils import random as random_bytes

from couchers.config import config


def urlsafe_random_bytes(length=32):
    return urlsafe_b64encode(random_bytes(length)).decode("utf8")


def urlsafe_secure_token():
    """
    A cryptographically secure random token that can be put in a URL
    """
    return urlsafe_random_bytes(32)


def cookiesafe_secure_token():
    return random_hex(32)


def hash_password(password: str):
    return nacl.pwhash.str(password.encode("utf-8"))


def verify_password(hashed: bytes, password: str):
    try:
        correct = nacl.pwhash.verify(hashed, password.encode("utf-8"))
        return correct
    except InvalidkeyError:
        return False


def random_hex(length=32):
    """
    Length in binary
    """
    return random_bytes(length).hex()


def secure_compare(val1, val2):
    return sodium_memcmp(val1, val2)


def generate_hash_signature(message: bytes, key: bytes) -> bytes:
    """
    Computes a blake2b keyed hash for the message.

    This can be used as a fast yet secure symmetric signature: by checking that
    the hashes agree, we can make sure the signature was generated by a party
    with knowledge of the key.
    """
    return generichash_blake2b_salt_personal(message, key=key, digest_size=32)


def verify_hash_signature(message: bytes, key: bytes, sig: bytes) -> bool:
    """
    Verifies a hash signature generated with generate_hash_signature.

    Returns true if the signature matches, otherwise false.
    """
    return secure_compare(sig, generate_hash_signature(message, key))


def generate_random_5digit_string():
    """Return a random 5-digit string"""
    return "%05d" % secrets.randbelow(100000)


def verify_token(a: str, b: str):
    """Return True if strings a and b are equal, in such a way as to
    reduce the risk of timing attacks.
    """
    return secrets.compare_digest(a, b)


def derive_secret(name):
    """
    Derives a secret key from the root secret using a key derivation function
    """
    return generate_hash_signature(name.encode("utf8"), config["SECRET_ROOT"])


UNSUBSCRIBE_KEY = derive_secret("unsubscribe")
