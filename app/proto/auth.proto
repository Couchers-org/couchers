syntax = "proto3";

package org.couchers.auth;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

import "annotations.proto";
import "api.proto";

service Auth {
  option (auth_level) = AUTH_LEVEL_OPEN;

  /*
  Authentication API

  This API facilitates authentication actions: signup and signin. Users need to use this before logging in, so you don't
  need to be authorized to use it.

  The signup flow is as follows:
  * A user enters their email and submits a form, which fires off a Signup call
  * Signup validates the email isn't in the database yet, creates a signup_token, and emails it to the email address
  * User clicks on the signup link, which brings them onto the signup completion form
  * When this form loads, the app queries SignupTokenInfo for the email address associated to that login token to
  display in the UI
  * User chooses a username (possibly querying UsernameValid to check possibly usernames) and fills in other basic
  information
  * User submits the signup completion form, which validates this input, creates the user and logs them in, returns a
  session token (signup token is invalidated)

  The login flow is as follows:
  * The user enters an identifier field and submits the form
  * The backend finds the user based on either username/user id/email address
  * If that user _does not_ have a password, we email a one-click signin token and return SENT_LOGIN_EMAIL
  * If that user _does not_ have a password, they click that link and the app logs them in through a
  CompleteTokenLoginReq (login token is invalidated)
  * If that user _does_ have a password, the app asks for that password, and submits an Authenticate Call to log the
  user in

  Signup and login tokens expire after some time, and once used cannot be reused.

  There can be multiple signup requests simultaneously with the same email address. Email address uniqueness is checked
  once when creating the signup request, and again when creating the user.
  */

  rpc SignupFlow(SignupFlowReq) returns (SignupFlowRes) {
    // The signup flow (from point of view of backend) is as follows:
    // * There are three parts to the signup: Basic, Account, and Feedback
    // * Each part needs to be filled in, and the user's email needs to be confirmed before the user can continue to the
    // app
    // * The Basic part must be filled in in the first request, after which the backend returns a flow_token
    // * The frontend may do the signup incrementally by sending the other parts with the same flow_token
    // * You can only fill in each part once
    // * You can get info on the flow_token by sending an empty request with just the flow_token
    // * Once the flow completes, the user is logged in and the signup flow is destroyed
    option (google.api.http) = {
      post : "/auth/signup"
      body : "*"
    };
  }

  rpc UsernameValid(UsernameValidReq) returns (UsernameValidRes) {
    // Check whether the username is valid and available
  }

  rpc Login(LoginReq) returns (LoginRes) {
    // First step of login flow.
    //
    // The user is searched for using their id, username, or email.
    //
    // If the user does not exist or has been deleted, throws a NOT_FOUND rpc error.
    //
    // If the user has a password, returns NEED_PASSWORD.
    //
    // If the user exists but does notÂ have a password, generates a login token, send it in the email and returns
    // SENT_LOGIN_EMAIL.
  }

  rpc CompleteTokenLogin(CompleteTokenLoginReq) returns (AuthRes) {
    // Complete a login after receiving an email with a login token
  }

  rpc Authenticate(AuthReq) returns (AuthRes) {
    // Auth a user with username + password
  }

  rpc Deauthenticate(google.protobuf.Empty) returns (google.protobuf.Empty) {
    // Invalidate a session, deauthing a user
  }

  rpc ResetPassword(ResetPasswordReq) returns (google.protobuf.Empty) {
    // Sends a forgot password email to the given user if the user exists, returns no output (so you can't go around
    // guessing email addresses)
  }

  rpc CompletePasswordReset(CompletePasswordResetReq) returns (google.protobuf.Empty) {
    // Triggered when the user goes to the link sent in the forgot password email
  }

  rpc ConfirmChangeEmail(ConfirmChangeEmailReq) returns (ConfirmChangeEmailRes) {
    // Triggered when the user goes to the link sent in the either email_changed_confirmation_*_email
  }

  rpc ConfirmDeleteAccount(ConfirmDeleteAccountReq) returns (google.protobuf.Empty) {
    // Confirms deletion of a user using a token
  }

  rpc RecoverAccount(RecoverAccountReq) returns (google.protobuf.Empty) {
    // Recovers a recently deleted account
  }

  rpc Unsubscribe(UnsubscribeReq) returns (UnsubscribeRes) {
    // Handle an unsubscribe action from an email
  }
}

message SignupFlowReq {
  // a token used to link the user's information across the signup flow
  // required if basic is empty, otherwise the backend generates a new signup
  string flow_token = 1 [ (sensitive) = true ];

  SignupBasic basic = 2;
  SignupAccount account = 3;
  ContributorForm feedback = 4;

  // email token is reused for both verifying a signup's email, but also for continuing a signup
  string email_token = 5 [ (sensitive) = true ];

  google.protobuf.BoolValue accept_community_guidelines = 6;
}

message SignupFlowRes {
  // a token used to link the user's information across the signup flow
  string flow_token = 1 [ (sensitive) = true ];
  // auth_res is included if and only if signup is successful
  AuthRes auth_res = 3;
  // which parts are missing?
  bool need_basic = 4;
  bool need_account = 5;
  bool need_feedback = 6;
  // user needs to verify their email
  bool need_verify_email = 7;
  bool need_accept_community_guidelines = 8;
}

message SignupBasic {
  string name = 1;
  string email = 2;
  // TODO: string invitation_code = 3;
  // TODO: UTM parameters, attribution
}

message SignupTokenInfoReq {
  string signup_token = 1 [ (sensitive) = true ];
}

message SignupAccount {
  // Should be lowercase ascii, matching regex [a-z][0-9a-z_]*[a-z0-9]
  string username = 1;
  string password = 2 [ (sensitive) = true ];
  string city = 6;
  double lat = 7;
  double lng = 8;
  double radius = 9; // meters

  string birthdate = 3; // in YYYY-MM-DD format
  string gender = 4;
  org.couchers.api.core.HostingStatus hosting_status = 5;

  bool accept_tos = 10;
}

message UsernameValidReq {
  string username = 1;
}

message UsernameValidRes {
  bool valid = 1;
}

message LoginReq {
  string user = 1;
}

message LoginRes {
  enum LoginStep {
    NEED_PASSWORD = 0;
    SENT_LOGIN_EMAIL = 1;
  }

  LoginStep next_step = 1;
}

message CompleteTokenLoginReq {
  string login_token = 1 [ (sensitive) = true ];
}

message AuthReq {
  string user = 1;
  string password = 2 [ (sensitive) = true ];

  // whether to remember the browser or not
  // if false, the session will time out after 7 days of inactivity (no API calls)
  // if true, the session is valid from creation until expiry, with no need to be used in between
  bool remember_device = 3;
}

message AuthRes {
  // user_id of the user
  int64 user_id = 1;
  // whether the user has to complete some additional steps to continue to the
  // platform
  bool jailed = 2;
}

message ResetPasswordReq {
  string user = 1;
}

message CompletePasswordResetReq {
  string password_reset_token = 1 [ (sensitive) = true ];
}

message ConfirmChangeEmailReq {
  string change_email_token = 1 [ (sensitive) = true ];
}

enum EmailConfirmationState {
  EMAIL_CONFIRMATION_STATE_UNKNOWN = 0;
  EMAIL_CONFIRMATION_STATE_SUCCESS = 1;
  EMAIL_CONFIRMATION_STATE_REQUIRES_CONFIRMATION_FROM_OLD_EMAIL = 2;
  EMAIL_CONFIRMATION_STATE_REQUIRES_CONFIRMATION_FROM_NEW_EMAIL = 3;
}

message ConfirmChangeEmailRes {
  EmailConfirmationState state = 1;
}

enum ContributeOption {
  CONTRIBUTE_OPTION_UNSPECIFIED = 0;
  CONTRIBUTE_OPTION_YES = 1;
  CONTRIBUTE_OPTION_MAYBE = 2;
  CONTRIBUTE_OPTION_NO = 3;
}

message ContributorForm {
  // all fields are optional
  string ideas = 1;
  string features = 2;
  string experience = 3;

  // if contribute is set to yes or maybe, then contribute, contribute_ways and expertise are required.
  ContributeOption contribute = 4;
  repeated string contribute_ways = 5;
  string expertise = 6;
}

message ConfirmDeleteAccountReq {
  string token = 1 [ (sensitive) = true ];
}

message RecoverAccountReq {
  string token = 1 [ (sensitive) = true ];
}

message UnsubscribeReq {
  // frontend should decode the base64 in urls and send raw bytes
  bytes payload = 1;
  bytes sig = 2;
}

message UnsubscribeRes {
  // returned only on success, otherwise errors out the RPC
  string response = 1;
}
