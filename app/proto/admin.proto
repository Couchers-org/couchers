syntax = "proto3";

package org.couchers.admin;

import "google/protobuf/empty.proto";

import "annotations.proto";
import "api.proto";
import "communities.proto";

service Admin {
  option (auth_level) = AUTH_LEVEL_ADMIN;

  rpc GetUserDetails(GetUserDetailsReq) returns (UserDetails) {}

  rpc ChangeUserGender(ChangeUserGenderReq) returns (UserDetails) {}

  rpc ChangeUserBirthdate(ChangeUserBirthdateReq) returns (UserDetails) {}

  rpc AddBadge(AddBadgeReq) returns (UserDetails) {}

  rpc RemoveBadge(RemoveBadgeReq) returns (UserDetails) {}

  rpc SetPassportSexGenderException(SetPassportSexGenderExceptionReq) returns (UserDetails) {}

  rpc BanUser(BanUserReq) returns (UserDetails) {}

  rpc UnbanUser(UnbanUserReq) returns (UserDetails) {}

  rpc AddAdminNote(AddAdminNoteReq) returns (UserDetails) {}

  rpc DeleteUser(DeleteUserReq) returns (UserDetails) {}

  rpc RecoverDeletedUser(RecoverDeletedUserReq) returns (UserDetails) {}

  rpc CreateApiKey(CreateApiKeyReq) returns (CreateApiKeyRes) {
    // Create an API key for a user. For security, we don't return the API key to the admin calling this API, rather
    // it's sent to the user in an email
  }

  rpc CreateCommunity(CreateCommunityReq) returns (org.couchers.api.communities.Community) {}

  rpc GetChats(GetChatsReq) returns (GetChatsRes) {}

  rpc ListEventCommunityInviteRequests(ListEventCommunityInviteRequestsReq) returns (ListEventCommunityInviteRequestsRes) {}

  rpc DecideEventCommunityInviteRequest(DecideEventCommunityInviteRequestReq) returns (DecideEventCommunityInviteRequestRes) {}

  rpc DeleteEvent(DeleteEventReq) returns (google.protobuf.Empty) {}
}

message UserDetails {
  int64 user_id = 1;
  string username = 2;
  string name = 14;
  string email = 3;
  string gender = 4;
  string birthdate = 7;
  bool banned = 5;
  bool deleted = 6;
  bool do_not_email = 15;
  repeated string badges = 8;

  bool has_strong_verification = 9;
  org.couchers.api.core.BirthdateVerificationStatus birthdate_verification_status = 10;
  org.couchers.api.core.GenderVerificationStatus gender_verification_status = 11;
  bool has_passport_sex_gender_exception = 12;

  string admin_note = 13;
}

message GetUserDetailsReq {
  // username, email, or user id
  string user = 1;
}

message ChangeUserGenderReq {
  // username, email, or user id
  string user = 1;
  string gender = 2;
}

message ChangeUserBirthdateReq {
  // username, email, or user id
  string user = 1;
  string birthdate = 2; // in YYYY-MM-DD format
}

message AddBadgeReq {
  string user = 1;
  string badge_id = 2;
}

message RemoveBadgeReq {
  string user = 1;
  string badge_id = 2;
}

message SetPassportSexGenderExceptionReq {
  string user = 1;
  bool passport_sex_gender_exception = 2;
}

message BanUserReq {
  // username, email, or user id
  string user = 1;
  string admin_note = 2;
}

message UnbanUserReq {
  // username, email, or user id
  string user = 1;
  string admin_note = 2;
}

message AddAdminNoteReq {
  // username, email, or user id
  string user = 1;
  string admin_note = 2;
}

message DeleteUserReq {
  // username, email, or user id
  string user = 1;
}

message RecoverDeletedUserReq {
  // username, email, or user id
  string user = 1;
}

message CreateApiKeyReq {
  // username, email, or user id
  string user = 1;
}

message CreateApiKeyRes {}

message CreateCommunityReq {
  string name = 1;
  string slug = 2;
  string description = 3;
  int64 parent_node_id = 4;
  repeated int64 admin_ids = 5;
  string geojson = 6;
}

message GetChatsReq {
  // username, email, or user id
  string user = 1;
}

message GetChatsRes {
  string response = 2;
}

message ListEventCommunityInviteRequestsReq {
  uint32 page_size = 1;
  string page_token = 2;
}

message EventCommunityInviteRequest {
  int64 event_community_invite_request_id = 1;

  int64 user_id = 2;
  string event_url = 3;

  // assuming they have notifs enabled
  uint32 approx_users_to_notify = 4;
  int64 community_id = 5;
}

message ListEventCommunityInviteRequestsRes {
  repeated EventCommunityInviteRequest requests = 1;

  string next_page_token = 2;
}

message DecideEventCommunityInviteRequestReq {
  int64 event_community_invite_request_id = 1;

  // whether to approve or deny it
  bool approve = 2;
}

message DecideEventCommunityInviteRequestRes {}

message DeleteEventReq {
  int64 event_id = 1;
}
