syntax = "proto3";

package org.couchers.api.references;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "annotations.proto";

service References {
  option (auth_level) = AUTH_LEVEL_SECURE;

  rpc ListReferences(ListReferencesReq) returns (ListReferencesRes) {
    // Returns a paginated list of references satisfying some filtering criterion
  }

  rpc WriteFriendReference(WriteFriendReferenceReq) returns (Reference) {
    // Write a reference for your friend. Raises INVALID_ARGUMENT if you
    // try to write for yourself, or NOT_FOUND if the user doesn't exist.
    // Raises FAILED_PRECONDITION if you try to write a reference for someone you already wrote a friend reference for.
  }

  rpc WriteHostRequestReference(WriteHostRequestReferenceReq) returns (Reference) {
    // Write a reference for someone after having hosted/surfed with them. Raises NOT_FOUND if the request doesn't
    // exist.
  }

  rpc AvailableWriteReferences(AvailableWriteReferencesReq) returns (AvailableWriteReferencesRes) {
    // Return the reference types that is, at the moment, possible to write about a user.
  }

  rpc ListPendingReferencesToWrite(google.protobuf.Empty) returns (ListPendingReferencesToWriteRes) {
    // Returns a list of references that you should write about others, e.g. after surfing or hosting
  }
}

enum ReferenceType {
  REFERENCE_TYPE_FRIEND = 0; // We met at an event but haven't surfed or hosted
  REFERENCE_TYPE_SURFED = 1; // The author has surfed, the referent has hosted
  REFERENCE_TYPE_HOSTED = 2; // The author has hosted, the referent has surfed
}

message Reference {
  int64 reference_id = 1;

  int64 from_user_id = 2;
  int64 to_user_id = 3;

  ReferenceType reference_type = 4;
  string text = 5; // plain text
  google.protobuf.Timestamp written_time = 6; // not exact

  // if the reference is about the current user, this tells which host request it's about
  int64 host_request_id = 7;
}

message ListReferencesReq {
  // at least one of these two must be set, zero means "any"
  uint64 from_user_id = 1;
  uint64 to_user_id = 2;

  // empty filter means include all, otherwise only those in the filter
  repeated ReferenceType reference_type_filter = 3;

  uint32 page_size = 4;
  string page_token = 5;
}

message ListReferencesRes {
  repeated Reference references = 1;

  string next_page_token = 2;
}

message WriteFriendReferenceReq {
  int64 to_user_id = 1;
  string text = 2; // plain text
  // private text to be send to moderation
  string private_text = 5; // plain text
  bool was_appropriate = 3;
  // rating is in [0,1]
  double rating = 4;
}

message WriteHostRequestReferenceReq {
  int64 host_request_id = 1;
  string text = 2; // plain text
  // private text to be send to moderation
  string private_text = 5; // plain text
  bool was_appropriate = 3;
  // rating is in [0,1]
  double rating = 4;
}

message AvailableWriteReferencesReq {
  int64 to_user_id = 1;
}

message AvailableWriteReferenceType {
  int64 host_request_id = 1;
  // surfed or hosted
  ReferenceType reference_type = 2;
  google.protobuf.Timestamp time_expires = 3;
}

message AvailableWriteReferencesRes {
  bool can_write_friend_reference = 1;
  repeated AvailableWriteReferenceType available_write_references = 2;
}

message ListPendingReferencesToWriteRes {
  repeated AvailableWriteReferenceType pending_references = 1;
}
