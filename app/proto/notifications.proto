syntax = "proto3";

package org.couchers.notifications;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "annotations.proto";

service Notifications {
  option (auth_level) = AUTH_LEVEL_SECURE;

  rpc GetNotificationSettings(GetNotificationSettingsReq) returns (GetNotificationSettingsRes);

  rpc SetNotificationSettings(SetNotificationSettingsReq) returns (GetNotificationSettingsRes);

  rpc GetDoNotEmail(GetDoNotEmailReq) returns (GetDoNotEmailRes);

  rpc SetDoNotEmail(SetDoNotEmailReq) returns (SetDoNotEmailRes);

  rpc ListNotifications(ListNotificationsReq) returns (ListNotificationsRes);

  rpc GetVapidPublicKey(google.protobuf.Empty) returns (GetVapidPublicKeyRes);

  rpc RegisterPushNotification(RegisterPushNotificationReq) returns (google.protobuf.Empty);

  rpc SendTestPushNotification(google.protobuf.Empty) returns (google.protobuf.Empty);
}

message GetNotificationSettingsReq {}

message NotificationItem {
  // e.g. "complete" for account recovery
  string action = 1;
  // e.g. "Password reset is completed"
  string description = 2;
  // whether this is user editable
  bool user_editable = 3;
  bool push = 4;
  bool email = 5;
  bool digest = 6;
}

message NotificationTopic {
  // e.g. "account_recovery"
  string topic = 1;
  // e.g. "Account recovery"
  string name = 2;

  // items in this topic
  repeated NotificationItem items = 3;
}

message NotificationGroup {
  // a set of notification topics grouped together, e.g. "Account Settings"
  string heading = 1;
  repeated NotificationTopic topics = 2;
}

message SingleNotificationPreference {
  string topic = 1;
  string action = 2;
  // one of "push"/"email"/"digest"
  string delivery_method = 3;
  bool enabled = 4;
}

message GetNotificationSettingsRes {
  bool new_notifications_enabled = 1;

  bool email_digest_enabled = 2;
  repeated NotificationGroup groups = 3;
}

message SetNotificationSettingsReq {
  bool enable_new_notifications = 1;

  // an arbitray list of these, they are applied consequtively, any errors will error out the whole thing
  repeated SingleNotificationPreference preferences = 2;
}

message GetDoNotEmailReq {}

message GetDoNotEmailRes {
  bool do_not_email_enabled = 1;
}

message SetDoNotEmailReq {
  bool enable_do_not_email = 1;
}

message SetDoNotEmailRes {}

message Notification {
  int64 notification_id = 1;
  google.protobuf.Timestamp created = 2;
  string topic = 3;
  string action = 4;
  string key = 5;
  string avatar_key = 6;
  string icon = 7;
  string title = 8;
  string content = 9;
  string link = 10;
}

message ListNotificationsReq {
  uint32 page_size = 1;
  string page_token = 2;
}

message ListNotificationsRes {
  repeated Notification notifications = 1;

  string next_page_token = 2;
}

message GetVapidPublicKeyRes {
  string vapid_public_key = 1;
}

message RegisterPushNotificationReq {
  // these are returned by a call to ServiceWorkerRegistration.pushManager.subscribe
  // see also: https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription
  string endpoint = 1;
  string auth_key = 2;
  string p256dh_key = 3;

  // for debug purposes
  string full_subscription_json = 4;
}
