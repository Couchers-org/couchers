syntax = "proto3";

package org.couchers.api.threads;

import "google/protobuf/timestamp.proto";

service Threads {
  // This is a secure service: a user needs to be authenticated and not jailed to call functions here, refer to auth.proto and jail.proto

  // Discussion threads are organized as a tree with maximum three levels depth:
  // thread1
  // +- comment1
  // |  +- reply1
  // |  +- reply2
  // +- comment2
  //    +- reply3
  //    +- reply4
  // thread2
  // +- comment3
  // |  +- reply5
  // |  +- reply6
  // +- comment4
  //    +- reply7
  //    +- reply8

  // The same API is used regardless of level. All posts are using the same id namespace.

  // Get non-deleted posts belonging to a thread.
  // For ease of display, the pagination order is most recent first, but within a page, replies are oldest first.
  // For example, if A is the most recent reply, the first page would have `[C, B, A]` and the second page `[F, E, D]`.
  rpc GetThread(GetThreadReq) returns (GetThreadRes);

  // Post a new comment on a thread. The post can not be changed or deleted after posting.
  // Throws NOT_FOUND if thread_id corresponds to a nesting level 3 reply, since no futher nesting is allowed.
  rpc PostReply(PostReplyReq) returns (PostReplyRes);
}

// object returned by pages, discussions etc to refer to top level threads.
message Thread {
  // top level thread id.
  int64 thread_id = 1;
  // total number of comments and replies to comments.
  int64 num_responses = 2;
}

message GetThreadReq {
  int64 thread_id = 1;

  // Maximum number of replies to return. Defaults to 1000.
  uint32 page_size = 2;

  // A page token, received from a previous `GetThread` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, `thread_id` must match
  // the call that provided the page token.
  string page_token = 3;
}

message GetThreadRes {
  // sorted in inverse time order, latest reply first.
  repeated Reply replies = 1;

  // A token that can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 3;
}

message Reply {
  int64 thread_id = 1;  // id of this comment
  string content = 2;   // CommonMark without images
  int64 author_user_id = 3;
  google.protobuf.Timestamp created_time = 4;

  // number of replies to this comment
  uint32 num_replies = 5;
}

message PostReplyReq {
  int64 thread_id = 1;  // The comment to reply to
  string content = 2;   // CommonMark without images
}

message PostReplyRes {
  // The id of the just posted comment
  int64 thread_id = 1;
}
