syntax = "proto3";

package org.couchers.api.communities;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "pb/discussions.proto";
import "pb/groups.proto";
import "pb/pages.proto";

service Communities {
  // This is a secure service: a user needs to be authenticated and not jailed to call functions here, refer to auth.proto and jail.proto

  rpc GetCommunity(GetCommunityReq) returns (Community) {
    // Get info about a Community
  }

  rpc ListCommunities(ListCommunitiesReq) returns (ListCommunitiesRes) {
    // Gets a paginated list of sub-communities associated with a community
  }

  rpc ListGroups(ListGroupsReq) returns (ListGroupsRes) {
    // Gets a paginated list of groups associated with a community
  }

  rpc ListAdmins(ListAdminsReq) returns (ListAdminsRes) {
    // Gets a paginated list of community admins only
  }

  rpc ListMembers(ListMembersReq) returns (ListMembersRes) {
    // Gets a paginated list of community members, including admins
  }

  rpc ListNearbyUsers(ListNearbyUsersReq) returns (ListNearbyUsersRes) {
    // Gets a paginated list of users who live within the polygon of the community
  }

  rpc ListPlaces(ListPlacesReq) returns (ListPlacesRes) {
    // Returns a paginated list of places associated with a community
  }

  rpc ListGuides(ListGuidesReq) returns (ListGuidesRes) {
    // Returns a paginated list of guides associated with a community
  }

  rpc ListEvents(ListEventsReq) returns (ListEventsRes) {
    // Returns a paginated events of guides associated with a community
  }

  rpc ListDiscussions(ListDiscussionsReq) returns (ListDiscussionsRes) {
    // Returns a paginated list of discussions associated with a community
  }

  rpc JoinCommunity(JoinCommunityReq) returns (google.protobuf.Empty) {
    // Join a community you're not a part of
    //
    // Raises: FAILED_PRECONDITION if the user is already part of the community
  }

  rpc LeaveCommunity(LeaveCommunityReq) returns (google.protobuf.Empty) {
    // Leave a community that you're not inside.
    // You cannot leave a community that you live inside.
    //
    // Raises: FAILED_PRECONDITION if the user is not part of the community or if their location is within the community
  }
}

message Community {
  int64 community_id = 1;
  string name = 2;
  // a short URL fragment generated from the name, e.g. New York City: a guide to Phá»Ÿ might become new-york-city-guide-to-pho
  string slug = 3;
  string description = 4;
  google.protobuf.Timestamp created = 5;
  // list of parents, ordered according to inclusion, e.g. World, US, New York, (NYC)
  repeated org.couchers.api.groups.Parent parents = 6;
  // we do not return the geometry here? (it's a potentially very big multipolygon)
  org.couchers.api.pages.Page main_page = 7;
  // whether the requesting user is member/admin
  bool member = 8;
  bool admin = 9;
  uint32 member_count = 10;
  uint32 admin_count = 11;
  uint32 nearby_user_count = 12;
}

message GetCommunityReq {
  int64 community_id = 1;
}

message ListCommunitiesReq {
  int64 community_id = 1;

  uint32 page_size = 2;
  string page_token = 3;
}

message ListCommunitiesRes {
  repeated Community communities = 1;

  string next_page_token = 2;
}

message ListGroupsReq {
  int64 community_id = 1;

  uint32 page_size = 2;
  string page_token = 3;
}

message ListGroupsRes {
  repeated org.couchers.api.groups.Group groups = 1;

  string next_page_token = 2;
}

message ListAdminsReq {
  int64 community_id = 1;

  uint32 page_size = 2;
  string page_token = 3;
}

message ListAdminsRes {
  repeated int64 admin_user_ids = 1;

  string next_page_token = 2;
}

message ListMembersReq {
  int64 community_id = 1;

  uint32 page_size = 2;
  string page_token = 3;
}

message ListMembersRes {
  repeated int64 member_user_ids = 1;

  string next_page_token = 2;
}

message ListNearbyUsersReq {
  int64 community_id = 1;

  uint32 page_size = 2;
  string page_token = 3;
}

message ListNearbyUsersRes {
  repeated int64 nearby_user_ids = 1;

  string next_page_token = 2;
}

message ListPlacesReq {
  int64 community_id = 1;

  uint32 page_size = 2;
  string page_token = 3;
}

message ListPlacesRes {
  repeated org.couchers.api.pages.Page places = 1;

  string next_page_token = 2;
}

message ListGuidesReq {
  int64 community_id = 1;

  uint32 page_size = 2;
  string page_token = 3;
}

message ListGuidesRes {
  repeated org.couchers.api.pages.Page guides = 1;

  string next_page_token = 2;
}

message ListEventsReq {
  int64 community_id = 1;

  uint32 page_size = 2;
  string page_token = 3;
}

message Event {
  // TODO
}

message ListEventsRes {
  repeated Event events = 1;

  string next_page_token = 2;
}

message ListDiscussionsReq {
  int64 community_id = 1;

  uint32 page_size = 2;
  string page_token = 3;
}

message ListDiscussionsRes {
  repeated org.couchers.api.discussions.Discussion discussions = 1;

  string next_page_token = 2;
}

message JoinCommunityReq {
  int64 community_id = 1;
}

message LeaveCommunityReq {
  int64 community_id = 1;
}
