"use strict";
// source: threads.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var annotations_pb = require('./annotations_pb.js');
goog.object.extend(proto, annotations_pb);
goog.exportSymbol('proto.org.couchers.api.threads.GetThreadReq', null, global);
goog.exportSymbol('proto.org.couchers.api.threads.GetThreadRes', null, global);
goog.exportSymbol('proto.org.couchers.api.threads.PostReplyReq', null, global);
goog.exportSymbol('proto.org.couchers.api.threads.PostReplyRes', null, global);
goog.exportSymbol('proto.org.couchers.api.threads.Reply', null, global);
goog.exportSymbol('proto.org.couchers.api.threads.Thread', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.couchers.api.threads.Thread = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.couchers.api.threads.Thread, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.org.couchers.api.threads.Thread.displayName = 'proto.org.couchers.api.threads.Thread';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.couchers.api.threads.GetThreadReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.couchers.api.threads.GetThreadReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.org.couchers.api.threads.GetThreadReq.displayName = 'proto.org.couchers.api.threads.GetThreadReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.couchers.api.threads.GetThreadRes = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.org.couchers.api.threads.GetThreadRes.repeatedFields_, null);
};
goog.inherits(proto.org.couchers.api.threads.GetThreadRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.org.couchers.api.threads.GetThreadRes.displayName = 'proto.org.couchers.api.threads.GetThreadRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.couchers.api.threads.Reply = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.couchers.api.threads.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.org.couchers.api.threads.Reply.displayName = 'proto.org.couchers.api.threads.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.couchers.api.threads.PostReplyReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.couchers.api.threads.PostReplyReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.org.couchers.api.threads.PostReplyReq.displayName = 'proto.org.couchers.api.threads.PostReplyReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.couchers.api.threads.PostReplyRes = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.couchers.api.threads.PostReplyRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.org.couchers.api.threads.PostReplyRes.displayName = 'proto.org.couchers.api.threads.PostReplyRes';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.org.couchers.api.threads.Thread.prototype.toObject = function (opt_includeInstance) {
        return proto.org.couchers.api.threads.Thread.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.org.couchers.api.threads.Thread} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.org.couchers.api.threads.Thread.toObject = function (includeInstance, msg) {
        var f, obj = {
            threadId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            numResponses: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.couchers.api.threads.Thread}
 */
proto.org.couchers.api.threads.Thread.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.org.couchers.api.threads.Thread;
    return proto.org.couchers.api.threads.Thread.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.couchers.api.threads.Thread} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.couchers.api.threads.Thread}
 */
proto.org.couchers.api.threads.Thread.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setThreadId(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setNumResponses(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.couchers.api.threads.Thread.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.org.couchers.api.threads.Thread.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.couchers.api.threads.Thread} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.couchers.api.threads.Thread.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getThreadId();
    if (f !== 0) {
        writer.writeInt64(1, f);
    }
    f = message.getNumResponses();
    if (f !== 0) {
        writer.writeInt64(2, f);
    }
};
/**
 * optional int64 thread_id = 1;
 * @return {number}
 */
proto.org.couchers.api.threads.Thread.prototype.getThreadId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {number} value
 * @return {!proto.org.couchers.api.threads.Thread} returns this
 */
proto.org.couchers.api.threads.Thread.prototype.setThreadId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional int64 num_responses = 2;
 * @return {number}
 */
proto.org.couchers.api.threads.Thread.prototype.getNumResponses = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/**
 * @param {number} value
 * @return {!proto.org.couchers.api.threads.Thread} returns this
 */
proto.org.couchers.api.threads.Thread.prototype.setNumResponses = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.org.couchers.api.threads.GetThreadReq.prototype.toObject = function (opt_includeInstance) {
        return proto.org.couchers.api.threads.GetThreadReq.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.org.couchers.api.threads.GetThreadReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.org.couchers.api.threads.GetThreadReq.toObject = function (includeInstance, msg) {
        var f, obj = {
            threadId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            pageSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
            pageToken: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.couchers.api.threads.GetThreadReq}
 */
proto.org.couchers.api.threads.GetThreadReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.org.couchers.api.threads.GetThreadReq;
    return proto.org.couchers.api.threads.GetThreadReq.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.couchers.api.threads.GetThreadReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.couchers.api.threads.GetThreadReq}
 */
proto.org.couchers.api.threads.GetThreadReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setThreadId(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setPageSize(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setPageToken(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.couchers.api.threads.GetThreadReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.org.couchers.api.threads.GetThreadReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.couchers.api.threads.GetThreadReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.couchers.api.threads.GetThreadReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getThreadId();
    if (f !== 0) {
        writer.writeInt64(1, f);
    }
    f = message.getPageSize();
    if (f !== 0) {
        writer.writeUint32(2, f);
    }
    f = message.getPageToken();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional int64 thread_id = 1;
 * @return {number}
 */
proto.org.couchers.api.threads.GetThreadReq.prototype.getThreadId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {number} value
 * @return {!proto.org.couchers.api.threads.GetThreadReq} returns this
 */
proto.org.couchers.api.threads.GetThreadReq.prototype.setThreadId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint32 page_size = 2;
 * @return {number}
 */
proto.org.couchers.api.threads.GetThreadReq.prototype.getPageSize = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/**
 * @param {number} value
 * @return {!proto.org.couchers.api.threads.GetThreadReq} returns this
 */
proto.org.couchers.api.threads.GetThreadReq.prototype.setPageSize = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional string page_token = 3;
 * @return {string}
 */
proto.org.couchers.api.threads.GetThreadReq.prototype.getPageToken = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.org.couchers.api.threads.GetThreadReq} returns this
 */
proto.org.couchers.api.threads.GetThreadReq.prototype.setPageToken = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.couchers.api.threads.GetThreadRes.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.org.couchers.api.threads.GetThreadRes.prototype.toObject = function (opt_includeInstance) {
        return proto.org.couchers.api.threads.GetThreadRes.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.org.couchers.api.threads.GetThreadRes} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.org.couchers.api.threads.GetThreadRes.toObject = function (includeInstance, msg) {
        var f, obj = {
            repliesList: jspb.Message.toObjectList(msg.getRepliesList(), proto.org.couchers.api.threads.Reply.toObject, includeInstance),
            nextPageToken: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.couchers.api.threads.GetThreadRes}
 */
proto.org.couchers.api.threads.GetThreadRes.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.org.couchers.api.threads.GetThreadRes;
    return proto.org.couchers.api.threads.GetThreadRes.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.couchers.api.threads.GetThreadRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.couchers.api.threads.GetThreadRes}
 */
proto.org.couchers.api.threads.GetThreadRes.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.org.couchers.api.threads.Reply;
                reader.readMessage(value, proto.org.couchers.api.threads.Reply.deserializeBinaryFromReader);
                msg.addReplies(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setNextPageToken(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.couchers.api.threads.GetThreadRes.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.org.couchers.api.threads.GetThreadRes.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.couchers.api.threads.GetThreadRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.couchers.api.threads.GetThreadRes.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getRepliesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.org.couchers.api.threads.Reply.serializeBinaryToWriter);
    }
    f = message.getNextPageToken();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * repeated Reply replies = 1;
 * @return {!Array<!proto.org.couchers.api.threads.Reply>}
 */
proto.org.couchers.api.threads.GetThreadRes.prototype.getRepliesList = function () {
    return /** @type{!Array<!proto.org.couchers.api.threads.Reply>} */ (jspb.Message.getRepeatedWrapperField(this, proto.org.couchers.api.threads.Reply, 1));
};
/**
 * @param {!Array<!proto.org.couchers.api.threads.Reply>} value
 * @return {!proto.org.couchers.api.threads.GetThreadRes} returns this
*/
proto.org.couchers.api.threads.GetThreadRes.prototype.setRepliesList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.org.couchers.api.threads.Reply=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.couchers.api.threads.Reply}
 */
proto.org.couchers.api.threads.GetThreadRes.prototype.addReplies = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.org.couchers.api.threads.Reply, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.couchers.api.threads.GetThreadRes} returns this
 */
proto.org.couchers.api.threads.GetThreadRes.prototype.clearRepliesList = function () {
    return this.setRepliesList([]);
};
/**
 * optional string next_page_token = 3;
 * @return {string}
 */
proto.org.couchers.api.threads.GetThreadRes.prototype.getNextPageToken = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.org.couchers.api.threads.GetThreadRes} returns this
 */
proto.org.couchers.api.threads.GetThreadRes.prototype.setNextPageToken = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.org.couchers.api.threads.Reply.prototype.toObject = function (opt_includeInstance) {
        return proto.org.couchers.api.threads.Reply.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.org.couchers.api.threads.Reply} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.org.couchers.api.threads.Reply.toObject = function (includeInstance, msg) {
        var f, obj = {
            threadId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            content: jspb.Message.getFieldWithDefault(msg, 2, ""),
            authorUserId: jspb.Message.getFieldWithDefault(msg, 3, 0),
            createdTime: (f = msg.getCreatedTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
            numReplies: jspb.Message.getFieldWithDefault(msg, 5, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.couchers.api.threads.Reply}
 */
proto.org.couchers.api.threads.Reply.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.org.couchers.api.threads.Reply;
    return proto.org.couchers.api.threads.Reply.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.couchers.api.threads.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.couchers.api.threads.Reply}
 */
proto.org.couchers.api.threads.Reply.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setThreadId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setContent(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setAuthorUserId(value);
                break;
            case 4:
                var value = new google_protobuf_timestamp_pb.Timestamp;
                reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
                msg.setCreatedTime(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setNumReplies(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.couchers.api.threads.Reply.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.org.couchers.api.threads.Reply.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.couchers.api.threads.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.couchers.api.threads.Reply.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getThreadId();
    if (f !== 0) {
        writer.writeInt64(1, f);
    }
    f = message.getContent();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getAuthorUserId();
    if (f !== 0) {
        writer.writeInt64(3, f);
    }
    f = message.getCreatedTime();
    if (f != null) {
        writer.writeMessage(4, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
    }
    f = message.getNumReplies();
    if (f !== 0) {
        writer.writeUint32(5, f);
    }
};
/**
 * optional int64 thread_id = 1;
 * @return {number}
 */
proto.org.couchers.api.threads.Reply.prototype.getThreadId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {number} value
 * @return {!proto.org.couchers.api.threads.Reply} returns this
 */
proto.org.couchers.api.threads.Reply.prototype.setThreadId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional string content = 2;
 * @return {string}
 */
proto.org.couchers.api.threads.Reply.prototype.getContent = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.org.couchers.api.threads.Reply} returns this
 */
proto.org.couchers.api.threads.Reply.prototype.setContent = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional int64 author_user_id = 3;
 * @return {number}
 */
proto.org.couchers.api.threads.Reply.prototype.getAuthorUserId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/**
 * @param {number} value
 * @return {!proto.org.couchers.api.threads.Reply} returns this
 */
proto.org.couchers.api.threads.Reply.prototype.setAuthorUserId = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional google.protobuf.Timestamp created_time = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.org.couchers.api.threads.Reply.prototype.getCreatedTime = function () {
    return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};
/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.org.couchers.api.threads.Reply} returns this
*/
proto.org.couchers.api.threads.Reply.prototype.setCreatedTime = function (value) {
    return jspb.Message.setWrapperField(this, 4, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.org.couchers.api.threads.Reply} returns this
 */
proto.org.couchers.api.threads.Reply.prototype.clearCreatedTime = function () {
    return this.setCreatedTime(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.couchers.api.threads.Reply.prototype.hasCreatedTime = function () {
    return jspb.Message.getField(this, 4) != null;
};
/**
 * optional uint32 num_replies = 5;
 * @return {number}
 */
proto.org.couchers.api.threads.Reply.prototype.getNumReplies = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};
/**
 * @param {number} value
 * @return {!proto.org.couchers.api.threads.Reply} returns this
 */
proto.org.couchers.api.threads.Reply.prototype.setNumReplies = function (value) {
    return jspb.Message.setProto3IntField(this, 5, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.org.couchers.api.threads.PostReplyReq.prototype.toObject = function (opt_includeInstance) {
        return proto.org.couchers.api.threads.PostReplyReq.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.org.couchers.api.threads.PostReplyReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.org.couchers.api.threads.PostReplyReq.toObject = function (includeInstance, msg) {
        var f, obj = {
            threadId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            content: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.couchers.api.threads.PostReplyReq}
 */
proto.org.couchers.api.threads.PostReplyReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.org.couchers.api.threads.PostReplyReq;
    return proto.org.couchers.api.threads.PostReplyReq.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.couchers.api.threads.PostReplyReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.couchers.api.threads.PostReplyReq}
 */
proto.org.couchers.api.threads.PostReplyReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setThreadId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setContent(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.couchers.api.threads.PostReplyReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.org.couchers.api.threads.PostReplyReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.couchers.api.threads.PostReplyReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.couchers.api.threads.PostReplyReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getThreadId();
    if (f !== 0) {
        writer.writeInt64(1, f);
    }
    f = message.getContent();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional int64 thread_id = 1;
 * @return {number}
 */
proto.org.couchers.api.threads.PostReplyReq.prototype.getThreadId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {number} value
 * @return {!proto.org.couchers.api.threads.PostReplyReq} returns this
 */
proto.org.couchers.api.threads.PostReplyReq.prototype.setThreadId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional string content = 2;
 * @return {string}
 */
proto.org.couchers.api.threads.PostReplyReq.prototype.getContent = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.org.couchers.api.threads.PostReplyReq} returns this
 */
proto.org.couchers.api.threads.PostReplyReq.prototype.setContent = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.org.couchers.api.threads.PostReplyRes.prototype.toObject = function (opt_includeInstance) {
        return proto.org.couchers.api.threads.PostReplyRes.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.org.couchers.api.threads.PostReplyRes} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.org.couchers.api.threads.PostReplyRes.toObject = function (includeInstance, msg) {
        var f, obj = {
            threadId: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.couchers.api.threads.PostReplyRes}
 */
proto.org.couchers.api.threads.PostReplyRes.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.org.couchers.api.threads.PostReplyRes;
    return proto.org.couchers.api.threads.PostReplyRes.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.couchers.api.threads.PostReplyRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.couchers.api.threads.PostReplyRes}
 */
proto.org.couchers.api.threads.PostReplyRes.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setThreadId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.couchers.api.threads.PostReplyRes.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.org.couchers.api.threads.PostReplyRes.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.couchers.api.threads.PostReplyRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.couchers.api.threads.PostReplyRes.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getThreadId();
    if (f !== 0) {
        writer.writeInt64(1, f);
    }
};
/**
 * optional int64 thread_id = 1;
 * @return {number}
 */
proto.org.couchers.api.threads.PostReplyRes.prototype.getThreadId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {number} value
 * @return {!proto.org.couchers.api.threads.PostReplyRes} returns this
 */
proto.org.couchers.api.threads.PostReplyRes.prototype.setThreadId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
goog.object.extend(exports, proto.org.couchers.api.threads);
//# sourceMappingURL=threads_pb.js.map